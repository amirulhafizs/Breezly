<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 48 48"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><defs><linearGradient id="a" x1="19.792" y1="11.069" x2="34.958" y2="25.652" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ffca4f"/><stop offset="1" stop-color="#f7ae30"/></linearGradient><linearGradient id="b" x1="19.534" y1="10.425" x2="25.615" y2="16.595" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ffd980"/><stop offset="1" stop-color="#ffca4f" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="27.566" y1="18.542" x2="35.698" y2="26.361" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ffca4f" stop-opacity="0"/><stop offset="1" stop-color="#f4901f"/></linearGradient><linearGradient id="d" x1="24" y1="20.75" x2="24" y2="46.13" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#eaecf7"/><stop offset="1" stop-color="#cdd3f1"/></linearGradient><linearGradient id="e" x1="27" y1="1.167" x2="27" y2="4.857" xlink:href="#a"/><linearGradient id="f" x1="9.874" y1="17.978" x2="13.874" y2="18.02" xlink:href="#a"/><linearGradient id="g" x1="43.833" y1="18" x2="40.082" y2="18" xlink:href="#a"/><linearGradient id="h" x1="38.813" y1="6.188" x2="36.188" y2="8.813" xlink:href="#a"/><linearGradient id="i" x1="15.084" y1="6.124" x2="17.792" y2="8.749" xlink:href="#a"/><linearGradient id="j" x1="24" y1="36.013" x2="24" y2="47.727" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#e2e5f4" stop-opacity="0"/><stop offset="1" stop-color="#9aa6e2"/></linearGradient></defs><g data-name="Cloudy day"><circle cx="27" cy="18" r="10" style="fill:url(#a)"/><path d="M27 27a9 9 0 1 1 9-9 9.01 9.01 0 0 1-9 9Z" style="fill:url(#b)"/><path d="M33.93 10.8 19.573 24.679A9.991 9.991 0 1 0 33.93 10.8Z" style="fill:url(#c)"/><path d="M38 30c-.121 0-.238.013-.357.018a12.981 12.981 0 0 0-23.7-3.826A10 10 0 1 0 12 46h26a8 8 0 0 0 0-16Z" style="fill:url(#d)"/><path d="M27 5a1 1 0 0 1-1-1V2a1 1 0 0 1 2 0v2a1 1 0 0 1-1 1Z" style="fill:url(#e)"/><path d="M13 19h-2a1 1 0 0 1 0-2h2a1 1 0 0 1 0 2Z" style="fill:url(#f)"/><path d="M43 19h-2a1 1 0 0 1 0-2h2a1 1 0 0 1 0 2Z" style="fill:url(#g)"/><path d="M36.9 9.1a1 1 0 0 1-.707-1.707l1.414-1.414a1 1 0 0 1 1.414 1.414l-1.415 1.415a1 1 0 0 1-.706.292Z" style="fill:url(#h)"/><path d="M17.1 9.1a1 1 0 0 1-.707-.293l-1.414-1.413a1 1 0 1 1 1.414-1.414l1.414 1.414A1 1 0 0 1 17.1 9.1Z" style="fill:url(#i)"/><path d="M2.2 34A10.005 10.005 0 0 0 12 46h26a7.99 7.99 0 0 0 6.921-12Z" style="fill:url(#j)"/></g></svg>