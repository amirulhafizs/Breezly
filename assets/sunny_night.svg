<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" data-name="Stary Night" viewBox="0 0 48 48"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><defs><linearGradient id="a" x1="3.703" y1="13.246" x2="10.266" y2="20.037" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ff4343"/><stop offset="1" stop-color="#e40000"/></linearGradient><linearGradient id="c" x1="14.72" y1="6.164" x2="21.001" y2="12.82" xlink:href="#a"/><linearGradient id="d" x1="26.136" y1="10.625" x2="40.948" y2="31.125" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ffca4f"/><stop offset="1" stop-color="#f7ae30"/></linearGradient><linearGradient id="e" x1="32.876" y1="23.785" x2="43.922" y2="32.98" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ffca4f" stop-opacity="0"/><stop offset="1" stop-color="#f4901f"/></linearGradient><linearGradient id="f" x1="20.808" y1="20.833" x2="20.808" y2="43.206" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#eaecf7"/><stop offset="1" stop-color="#cdd3f1"/></linearGradient><linearGradient id="g" x1="20.822" y1="36.022" x2="20.822" y2="44.5" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#e2e5f4" stop-opacity="0"/><stop offset="1" stop-color="#9aa6e2"/></linearGradient><linearGradient id="b" x1="17.634" y1="9.03" x2="21.375" y2="13.783" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ff4343" stop-opacity="0"/><stop offset="1" stop-color="#af0000"/></linearGradient><linearGradient id="h" x1="6.748" y1="16.244" x2="10.154" y2="20.322" xlink:href="#b"/></defs><path d="M7.349 12.227 8.374 14.4l2.292.348a.413.413 0 0 1 .216.7l-1.658 1.687.391 2.388a.394.394 0 0 1-.565.43L7 18.825l-2.05 1.127a.394.394 0 0 1-.565-.43l.391-2.388-1.658-1.69a.413.413 0 0 1 .216-.7l2.292-.344 1.025-2.173a.382.382 0 0 1 .698 0Z" style="fill:url(#a)"/><path d="M18.349 5.227 19.374 7.4l2.292.348a.413.413 0 0 1 .216.7l-1.658 1.691.391 2.388a.394.394 0 0 1-.565.43L18 11.825l-2.05 1.127a.394.394 0 0 1-.565-.43l.391-2.388-1.658-1.69a.413.413 0 0 1 .216-.7l2.292-.344 1.025-2.173a.382.382 0 0 1 .698 0Z" style="fill:url(#c)"/><path d="M42.21 26.393a9.6 9.6 0 0 1-5.676-17.356C36.291 9.022 36.049 9 35.8 9A11.442 11.442 0 1 0 46 25.614a9.576 9.576 0 0 1-3.79.779Z" style="fill:url(#d)"/><path d="M33.923 21.633a982.157 982.157 0 0 1-7.2 5.747A11.42 11.42 0 0 0 46 25.614a9.6 9.6 0 0 1-12.077-3.981Z" style="fill:url(#e)"/><path d="M32.776 29.322c-.1 0-.2.011-.305.015a11.1 11.1 0 0 0-20.263-3.271A8.548 8.548 0 1 0 10.549 43h22.227a6.839 6.839 0 0 0 0-13.678Z" style="fill:url(#f)"/><path d="M2.028 35a8.542 8.542 0 0 0 8.521 8h22.227a6.8 6.8 0 0 0 6.733-8Z" style="fill:url(#g)"/><path d="M21.666 7.748 19.374 7.4l-.1-.217-3.581 2.865.086.087-.391 2.388a.394.394 0 0 0 .565.43L18 11.825l2.05 1.127a.394.394 0 0 0 .565-.43l-.391-2.388 1.658-1.691a.413.413 0 0 0-.216-.695Z" style="fill:url(#b)"/><path d="M10.666 14.748 8.374 14.4l-.034-.072-3.572 2.858-.383 2.337a.394.394 0 0 0 .565.43L7 18.825l2.05 1.127a.394.394 0 0 0 .565-.43l-.391-2.388 1.658-1.691a.413.413 0 0 0-.216-.695Z" style="fill:url(#h)"/></svg>