<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 48 48"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><defs><linearGradient id="b" x1="35" y1="13.188" x2="35" y2="25.894" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#9aa6e2"/><stop offset="1" stop-color="#7283d6"/></linearGradient><linearGradient id="c" x1="35" y1="21.072" x2="35" y2="27.083" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#7283d6" stop-opacity="0"/><stop offset="1" stop-color="#4d62cb"/></linearGradient><linearGradient id="d" x1="26" y1="22.625" x2="26" y2="45.836" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#eaecf7"/><stop offset="1" stop-color="#cdd3f1"/></linearGradient><linearGradient id="a" x1="9.808" y1="9.473" x2="16.058" y2="16.379" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ffca4f"/><stop offset="1" stop-color="#f7ae30"/></linearGradient><linearGradient id="e" x1="13" y1="1.938" x2="13" y2="5.719" xlink:href="#a"/><linearGradient id="f" x1="13" y1="23.938" x2="13" y2="20.029" xlink:href="#a"/><linearGradient id="g" x1="2" y1="13" x2="6" y2="13" xlink:href="#a"/><linearGradient id="h" x1="20" y1="13" x2="24" y2="13" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#f7ae30"/><stop offset="1" stop-color="#ffca4f"/></linearGradient><linearGradient id="i" x1="5.194" y1="20.757" x2="7.976" y2="18.07" xlink:href="#a"/><linearGradient id="j" x1="20.742" y1="5.242" x2="17.992" y2="8.023" xlink:href="#a"/><linearGradient id="k" x1="20.601" y1="20.586" x2="18.007" y2="18.024" xlink:href="#a"/><linearGradient id="l" x1="5.265" y1="5.174" x2="8.108" y2="8.205" xlink:href="#a"/><linearGradient id="m" x1="13.163" y1="13.171" x2="16.303" y2="16.499" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ffca4f" stop-opacity="0"/><stop offset="1" stop-color="#f4901f"/></linearGradient><linearGradient id="n" x1="26.006" y1="37.234" x2="26.006" y2="47.336" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#e2e5f4" stop-opacity="0"/><stop offset="1" stop-color="#9aa6e2"/></linearGradient></defs><g data-name="Sunny Cloudy"><path d="M42 18c-.06 0-.119.006-.179.009A6.49 6.49 0 0 0 29.97 16.1 5 5 0 1 0 29 26h13a4 4 0 0 0 0-8Z" style="fill:url(#b)"/><path d="M24 21a5 5 0 0 0 5 5h13a3.952 3.952 0 0 0 3.859-5Z" style="fill:url(#c)"/><path d="M38.727 31.231c-.11 0-.216.012-.325.017a11.739 11.739 0 0 0-21.547-3.532 8.993 8.993 0 0 0-1.764-.177 9.232 9.232 0 0 0 0 18.462h23.636a7.385 7.385 0 0 0 0-14.769Z" style="fill:url(#d)"/><circle cx="13" cy="13" r="4" style="fill:url(#a)"/><path d="M13 6a1 1 0 0 1-1-1V3a1 1 0 0 1 2 0v2a1 1 0 0 1-1 1Z" style="fill:url(#e)"/><path d="M13 24a1 1 0 0 1-1-1v-2a1 1 0 0 1 2 0v2a1 1 0 0 1-1 1Z" style="fill:url(#f)"/><path d="M5 14H3a1 1 0 0 1 0-2h2a1 1 0 0 1 0 2Z" style="fill:url(#g)"/><path d="M23 14h-2a1 1 0 0 1 0-2h2a1 1 0 0 1 0 2Z" style="fill:url(#h)"/><path d="M5.929 21.071a1 1 0 0 1-.707-1.707l1.414-1.414a1 1 0 0 1 1.414 1.414l-1.414 1.414a1 1 0 0 1-.707.293Z" style="fill:url(#i)"/><path d="M18.657 8.343a1 1 0 0 1-.707-1.707l1.415-1.414a1 1 0 0 1 1.414 1.414L19.364 8.05a1 1 0 0 1-.707.293Z" style="fill:url(#j)"/><path d="M20.071 21.071a1 1 0 0 1-.707-.293l-1.414-1.414a1 1 0 0 1 1.414-1.414l1.415 1.414a1 1 0 0 1-.707 1.707Z" style="fill:url(#k)"/><path d="M7.343 8.343a1 1 0 0 1-.707-.293L5.222 6.636a1 1 0 0 1 1.414-1.414L8.05 6.636a1 1 0 0 1-.707 1.707Z" style="fill:url(#l)"/><path d="m15.828 10.172-5.657 5.657a4 4 0 1 0 5.657-5.657Z" style="fill:url(#m)"/><path d="M6.011 37a9.152 9.152 0 0 0 9.079 9h23.637A7.329 7.329 0 0 0 46 38.615 7.5 7.5 0 0 0 45.82 37Z" style="fill:url(#n)"/></g></svg>