<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 48 48"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><defs><linearGradient id="b" x1="27.369" y1="3.457" x2="40.202" y2="23.291" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ffca4f"/><stop offset="1" stop-color="#f7ae30"/></linearGradient><linearGradient id="c" x1="32.73" y1="15.166" x2="42.48" y2="24.333" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ffca4f" stop-opacity="0"/><stop offset="1" stop-color="#f4901f"/></linearGradient><linearGradient id="a" x1="21.462" y1="14" x2="21.462" y2="36.875" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#eaecf7"/><stop offset="1" stop-color="#cdd3f1"/></linearGradient><linearGradient id="d" x1="37.393" y1="40.156" x2="34.558" y2="45.944" xlink:href="#a"/><linearGradient id="e" x1="27.309" y1="40.186" x2="24.621" y2="45.967" xlink:href="#a"/><linearGradient id="f" x1="17.407" y1="40.141" x2="14.563" y2="45.922" xlink:href="#a"/><linearGradient id="g" x1="7.425" y1="40.119" x2="4.582" y2="45.869" xlink:href="#a"/><linearGradient id="h" x1="21.462" y1="29.5" x2="21.462" y2="39.446" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#e2e5f4" stop-opacity="0"/><stop offset="1" stop-color="#9aa6e2"/></linearGradient></defs><g data-name="Rainy Night"><path d="M42.357 18.72A9.232 9.232 0 0 1 36.9 2.036c-.234-.015-.466-.036-.7-.036A11 11 0 1 0 46 17.971a9.206 9.206 0 0 1-3.643.749Z" style="fill:url(#b)"/><path d="M33.509 12.139c-2.5 2.156-4.941 4.275-7 6.066A10.993 10.993 0 0 0 46 17.971a9.238 9.238 0 0 1-12.491-5.832Z" style="fill:url(#c)"/><path d="M33.846 22.846c-.107 0-.21.011-.316.016a11.483 11.483 0 0 0-20.967-3.385A8.845 8.845 0 1 0 10.846 37h23a7.077 7.077 0 0 0 0-14.154Z" style="fill:url(#a)"/><path d="M35 46a1 1 0 0 1-.894-1.447l2-4a1 1 0 1 1 1.789.895l-2 4A1 1 0 0 1 35 46Z" style="fill:url(#d)"/><path d="M25 46a1 1 0 0 1-.894-1.447l2-4a1 1 0 0 1 1.789.895l-2 4A1 1 0 0 1 25 46Z" style="fill:url(#e)"/><path d="M15 46a1 1 0 0 1-.894-1.447l2-4a1 1 0 0 1 1.789.895l-2 4A1 1 0 0 1 15 46Z" style="fill:url(#f)"/><path d="M5 46a1 1 0 0 1-.894-1.447l2-4a1 1 0 1 1 1.789.895l-2 4A1 1 0 0 1 5 46Z" style="fill:url(#g)"/><path d="M2.084 27a8.788 8.788 0 0 0 8.762 10h23a7.067 7.067 0 0 0 6.44-10Z" style="fill:url(#h)"/></g></svg>